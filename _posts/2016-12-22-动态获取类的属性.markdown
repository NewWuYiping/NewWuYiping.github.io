---
layout: post
title:  "动态获取类的属性"
date:   2016-12-22 16:00:59 +0800
categories: Reflect
---

以前还在做java开发的时候，使用过一些ORM框架（iBatis，Hibernate），这些框架都需要将结果集转化为对象，并将结果集里面的数据填充到对象的属性当中。这种技术由来已久，甚至不仅仅出现在ORM框架中，像BeanUtils这种小工具也会使用这样的技术。在移动开发中，数据集来自于网络，也同样需要采用类似于java反射的这种技术，将JSON数据转化为对象。

###IOS获取类的属性

首先先定义一个Person类。

	@interface Product : NSObject {
    	int _build;
	}

	@property(nonatomic, assign)int count;
	@property(nonatomic, strong)NSDate *date;
	@property(nonatomic, assign)double price;
	@property(nonatomic, copy)NSString *introduce;
	@property(nonatomic, assign)BOOL isSale;

	@property(nonatomic, readonly)NSArray *pictureArr;
	@property(nonatomic, strong)NSDictionary *versionDic;

	- (void)buildInfo;

	@end
	
1. 获取类的所有属性

		Product *product = [Product new];
		Class clazz = product.class;
		unsigned int count = 0;
		objc_property_t *properties = class_copyPropertyList(clazz, &count);
        for (int i=0; i<count; i++) {
            objc_property_t property = properties[i];
            NSLog(@"Property %s\t\t\t%s", property_getName(property), property_getAttributes(property));
        }
        
	打印结果：
	
		Property count			Ti,N,V_count
		Property date				T@"NSDate",&,N,V_date
		Property price			Td,N,V_price
		Property introduce		T@"NSString",C,N,V_introduce
		Property isSale			Tc,N,V_isSale
		Property pictureArr		T@"NSArray",R,N,V_pictureArr
		Property versionDic		T@"NSDictionary",&,N,V_versionDic
		
	将`T@"NSArray",R,N,V_pictureArr`进行翻译：
	
	objc_property_t|翻译
	:----|:----
	T|@property
	T@"NSArray"|@property NSArray *
	T@"NSArray",R,N|@property(readonly, nonatomic)NSArray *
	T@"NSArray",R,N,V_pictureArr|@property(readonly, nonatomic)NSArray *pictureArr
	
	具体的请看[Type encodings]
	
	
[Type encodings]: https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html

2. 获取类的所有成员变量

		Product *product = [Product new];
		Class clazz = product.class;
        Ivar *ivers = class_copyIvarList(clazz, &count);
        for (int i=0; i<count; i++) {
            Ivar iver = ivers[i];
            NSLog(@"Ivar %s \t %s", ivar_getName(iver), ivar_getTypeEncoding(iver));
        }
        
	打印结果：
	
		Ivar _build 	 i
		Ivar _isSale 	 c
		Ivar _count 	 i
		Ivar _date 	 @"NSDate"
		Ivar _price 	 d
		Ivar _introduce 	 @"NSString"
		Ivar _pictureArr 	 @"NSArray"
		Ivar _versionDic 	 @"NSDictionary"
		
	>注意这里BOOL类型实际是`c`，如果用C99的编译器是那么就不是`c`而是`b`

3. 修改私有成员变量
	
	私有变量通过正常途径肯定是无法修改，如果要修改私有变量，那只能获取到私有变量的指针地址。那么每个私有变量的地址肯定是不同的，但是对于私有变量的拥有者，也就是对象肯定是相同的。
	
	这个就有点像 char *str代表一个字符串一样, &char[0] + 4 == &char[5]。
	
	&char[0]就代表了对象的地址，&char[5]就代表了私有变量的地址，他们之间的偏移量是4。
	
	我们可以得出`私有变量的地址 = 对象的地址 + 偏移量`。
	
	对象的地址：`(__bridge void *)product`
	
	偏移量：`ivar_getOffset(iver)`
	
	私有变量的地址: `int *iver_pointer = (int *)((__bridge void *)product + ivar_getOffset(iver))`
	
	赋值：`*iver_pointer = 250`
	
	[示例代码]
	
[示例代码]: https://github.com/NewWuYiping/reflect_property_list